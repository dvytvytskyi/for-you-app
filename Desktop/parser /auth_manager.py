import time
import os
import json
from datetime import datetime, timedelta
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from config import Config

class AuthManager:
    def __init__(self):
        self.driver = None
        self.is_authenticated = False
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        if Config.SAVE_SCREENSHOTS and not os.path.exists(Config.SCREENSHOTS_DIR):
            os.makedirs(Config.SCREENSHOTS_DIR)
    
    def save_screenshot(self, filename):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –≤ –ø–∞–ø–∫—É screenshots"""
        if Config.SAVE_SCREENSHOTS and self.driver:
            filepath = os.path.join(Config.SCREENSHOTS_DIR, filename)
            self.driver.save_screenshot(filepath)
            print(f"–°–∫—Ä—ñ–Ω—à–æ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filepath}")
            return filepath
        return None
    
    def save_session(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó (cookies)"""
        try:
            if self.driver and self.is_authenticated:
                cookies = self.driver.get_cookies()
                session_data = {
                    "timestamp": datetime.now().isoformat(),
                    "cookies": cookies,
                    "url": self.driver.current_url
                }
                
                os.makedirs(os.path.dirname(Config.SESSION_FILE), exist_ok=True)
                with open(Config.SESSION_FILE, 'w', encoding='utf-8') as f:
                    json.dump(session_data, f, ensure_ascii=False, indent=2)
                
                print(f"–°–µ—Å—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞: {Config.SESSION_FILE}")
                return True
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó: {str(e)}")
        return False
    
    def load_session(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó (cookies)"""
        try:
            if not os.path.exists(Config.SESSION_FILE):
                print("–§–∞–π–ª —Å–µ—Å—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            with open(Config.SESSION_FILE, 'r', encoding='utf-8') as f:
                session_data = json.load(f)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞ —Å–µ—Å—ñ—è
            session_time = datetime.fromisoformat(session_data["timestamp"])
            if datetime.now() - session_time > timedelta(seconds=Config.SESSION_DURATION):
                print("–°–µ—Å—ñ—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞")
                return False
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
            self.driver.get(Config.BASE_URL)
            time.sleep(2)
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ cookies
            for cookie in session_data["cookies"]:
                try:
                    self.driver.add_cookie(cookie)
                except:
                    continue
            
            # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ cookies
            self.driver.refresh()
            time.sleep(3)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –≤—Å–µ —â–µ –¥—ñ–π—Å–Ω–∞
            if self._check_auth_success():
                self.is_authenticated = True
                print("‚úÖ –°–µ—Å—ñ—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
                return True
            else:
                print("–°–µ—Å—ñ—è –Ω–µ–¥—ñ–π—Å–Ω–∞")
                return False
                
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó: {str(e)}")
            return False
    
    def clear_session(self):
        """–û—á–∏—â–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó —Å–µ—Å—ñ—ó"""
        try:
            if os.path.exists(Config.SESSION_FILE):
                os.remove(Config.SESSION_FILE)
                print("–°–µ—Å—ñ—è –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ—ó: {str(e)}")
        
    def setup_driver(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä–∞"""
        chrome_options = Options()
        
        if Config.HEADLESS:
            chrome_options.add_argument("--headless")
        
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument(f"--user-agent={Config.USER_AGENT}")
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è ChromeDriver: {str(e)}")
            try:
                # –°–ø—Ä–æ–±—É—î–º–æ –≤—Ä—É—á–Ω—É –≤–∫–∞–∑–∞—Ç–∏ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É
                import platform
                if platform.machine() == 'arm64':
                    service = Service(ChromeDriverManager(os_type="mac_arm64").install())
                else:
                    service = Service(ChromeDriverManager(os_type="mac64").install())
                self.driver = webdriver.Chrome(service=service, options=chrome_options)
            except Exception as e2:
                print(f"–ü–æ–º–∏–ª–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è ChromeDriver: {str(e2)}")
                # –û—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞ - –±–µ–∑ service
                self.driver = webdriver.Chrome(options=chrome_options)
        
        # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é
        self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        return self.driver
    
    def accept_cookies(self):
        """–ü—Ä–∏–π–Ω—è—Ç—Ç—è cookies"""
        try:
            print("üîç –®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–π–Ω—è—Ç—Ç—è cookies...")
            
            # –†—ñ–∑–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ cookies
            cookie_selectors = [
                "//button[@id='gdpr-cookie-accept']",
                "//button[contains(text(), 'Accept')]",
                "//button[contains(text(), 'OK')]",
                "//button[contains(text(), 'Got it')]",
                "//a[contains(text(), 'Accept')]",
                "//div[contains(@class, 'cookie')]//button",
                "//button[contains(@class, 'cookie')]"
            ]
            
            for selector in cookie_selectors:
                try:
                    cookie_button = WebDriverWait(self.driver, 3).until(
                        EC.element_to_be_clickable((By.XPATH, selector))
                    )
                    cookie_button.click()
                    print("‚úÖ Cookies –ø—Ä–∏–π–Ω—è—Ç–æ")
                    time.sleep(2)
                    return True
                except:
                    continue
            
            print("‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ cookies –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –≤–∂–µ –ø—Ä–∏–π–Ω—è—Ç–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è cookies: {str(e)}")
            return False
    
    def click_agents_button(self):
        """–ö–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É agents"""
        try:
            print("üîç –®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É agents...")
            
            # –†—ñ–∑–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ agents
            agents_selectors = [
                "//div[@class='b_agentes_top']//a[contains(text(), 'agents')]",
                "//a[contains(text(), 'agents')]",
                "//a[contains(text(), 'Agents')]",
                "//a[contains(text(), 'AGENTS')]",
                "//div[contains(@class, 'agent')]//a",
                "//a[contains(@href, 'agent')]"
            ]
            
            for selector in agents_selectors:
                try:
                    agent_button = WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, selector))
                    )
                    
                    # –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –¥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
                    self.driver.execute_script("arguments[0].scrollIntoView(true);", agent_button)
                    time.sleep(1)
                    
                    # –ö–ª—ñ–∫–∞—î–º–æ
                    agent_button.click()
                    print("‚úÖ –ö–ª—ñ–∫–Ω—É—Ç–æ –Ω–∞ –∫–Ω–æ–ø–∫—É agents")
                    time.sleep(3)
                    return True
                except:
                    continue
            
            print("‚ùå –ö–Ω–æ–ø–∫–∞ agents –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            return False
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É agents: {str(e)}")
            return False
    
    def fill_login_form(self):
        """–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"""
        try:
            print("üìù –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó...")
            
            # –ü–æ–ª–µ username
            try:
                username_field = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.ID, "login_usuario"))
                )
                username_field.clear()
                username_field.send_keys(Config.LOGIN_EMAIL)
                print("‚úÖ –í–≤–µ–¥–µ–Ω–æ email")
            except:
                print("‚ùå –ü–æ–ª–µ username –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            # –ü–æ–ª–µ password
            try:
                password_field = self.driver.find_element(By.ID, "login_contrasena")
                password_field.clear()
                password_field.send_keys(Config.LOGIN_PASSWORD)
                print("‚úÖ –í–≤–µ–¥–µ–Ω–æ password")
            except:
                print("‚ùå –ü–æ–ª–µ password –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            # –ö–Ω–æ–ø–∫–∞ LOGIN
            try:
                login_button = self.driver.find_element(By.XPATH, "//input[@type='submit' and @value='LOGIN']")
                login_button.click()
                print("‚úÖ –ö–ª—ñ–∫–Ω—É—Ç–æ –Ω–∞ –∫–Ω–æ–ø–∫—É LOGIN")
                time.sleep(8)  # –ß–µ–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ä–º–∏
                return True
            except:
                print("‚ùå –ö–Ω–æ–ø–∫–∞ LOGIN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
                return False
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏: {str(e)}")
            return False
    
    def login(self):
        """–ü–æ–≤–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–∞ —Å–∞–π—Ç—ñ"""
        try:
            print("üöÄ –ü–æ—á–∏–Ω–∞—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é...")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
            self.driver.get(Config.BASE_URL)
            time.sleep(3)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            self.save_screenshot("main_page.png")
            
            # –ö—Ä–æ–∫ 1: –ü—Ä–∏–π–º–∞—î–º–æ cookies
            if not self.accept_cookies():
                print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–∏–π–Ω—è—Ç–∏ cookies, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ...")
            
            # –ö—Ä–æ–∫ 2: –ö–ª—ñ–∫–∞—î–º–æ –Ω–∞ –∫–Ω–æ–ø–∫—É agents
            if not self.click_agents_button():
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É agents")
                return False
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
            self.save_screenshot("login_modal.png")
            
            # –ö—Ä–æ–∫ 3: –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
            if not self.fill_login_form():
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")
                return False
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—ñ—Å–ª—è —Å–ø—Ä–æ–±–∏ –≤—Ö–æ–¥—É
            self.save_screenshot("after_login.png")
            
            # –ö—Ä–æ–∫ 4: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
            if self._check_auth_success():
                self.is_authenticated = True
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!")
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–µ—Å—ñ—é
                self.save_session()
                
                return True
            else:
                print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {str(e)}")
            return False
    
    def _check_auth_success(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"""
        try:
            print("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó...")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —è–∫—ñ –∑'—è–≤–ª—è—é—Ç—å—Å—è –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
            auth_indicators = [
                "//div[contains(@class, 'agent')]",
                "//a[contains(text(), 'logout')]",
                "//a[contains(text(), 'Logout')]",
                "//span[contains(@class, 'user-name')]",
                "//div[contains(@class, 'dashboard')]",
                "//a[contains(@href, 'logout')]"
            ]
            
            for indicator in auth_indicators:
                try:
                    element = self.driver.find_element(By.XPATH, indicator)
                    if element:
                        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {indicator}")
                        return True
                except:
                    continue
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∏ –≤—Ö–æ–¥—É
            try:
                login_form = self.driver.find_element(By.XPATH, "//input[@id='login_usuario']")
                print("‚ùå –§–æ—Ä–º–∞ –≤—Ö–æ–¥—É –≤—Å–µ —â–µ –ø—Ä–∏—Å—É—Ç–Ω—è")
                return False
            except:
                print("‚úÖ –§–æ—Ä–º–∞ –≤—Ö–æ–¥—É –≤—ñ–¥—Å—É—Ç–Ω—è - –º–æ–∂–ª–∏–≤–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞")
                return True
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {str(e)}")
            return False
    
    def logout(self):
        """–í–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏"""
        try:
            logout_button = self.driver.find_element(By.XPATH, "//a[contains(text(), 'logout') or contains(text(), 'Logout')]")
            logout_button.click()
            time.sleep(2)
            self.is_authenticated = False
            print("‚úÖ –í–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏ —É—Å–ø—ñ—à–Ω–∏–π")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É: {str(e)}")
    
    def close(self):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.driver:
            self.driver.quit()
            print("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä–∏—Ç–æ")
