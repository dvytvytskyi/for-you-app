#!/usr/bin/env python3
"""
AI –æ–±—Ä–æ–±–∫–∞ –ø–ª–∞–Ω—ñ–≤ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
"""

import json
import os
import requests
from ai_processor_download import AIProcessor
from datetime import datetime

def filter_unique_plans(plans_images):
    """
    –§—ñ–ª—å—Ç—Ä—É—î –ø–ª–∞–Ω–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç—ñ–ª—å–∫–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑ planos_div
    """
    unique_plans = []
    seen_urls = set()
    
    for plan in plans_images:
        url = plan.get("src", "")
        location = plan.get("location", "")
        
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω–∏ –±–µ–∑ URL
        if not url:
            continue
            
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–ª–∞–Ω–∏ –∑ planos_div (–æ—Å–Ω–æ–≤–Ω—ñ –ø–ª–∞–Ω–∏)
        if location != "planos_div":
            continue
            
        # –Ø–∫—â–æ URL –≤–∂–µ –±–∞—á–∏–ª–∏, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
        if url in seen_urls:
            continue
            
        # –î–æ–¥–∞—î–º–æ –¥–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö
        seen_urls.add(url)
        unique_plans.append(plan)
    
    return unique_plans

def process_plans():
    """AI –æ–±—Ä–æ–±–∫–∞ –ø–ª–∞–Ω—ñ–≤"""
    
    # API –∫–ª—é—á Google AI Studio
    API_KEY = "AIzaSyC0oK7s9qOjZW-Jv9YGCmQlwBkr8K-xMzY"
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ AI –ø—Ä–æ—Ü–µ—Å–æ—Ä
    ai_processor = AIProcessor(API_KEY)
    
    # –®–ª—è—Ö –¥–æ initial.json
    initial_json_path = "projects/MEDBLUE_MARBELLA/initial.json"
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ initial.json
    try:
        with open(initial_json_path, 'r', encoding='utf-8') as f:
            initial_data = json.load(f)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è initial.json: {str(e)}")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–ª–∞–Ω–∏
    plans_data = initial_data.get("plans", {})
    all_plans_images = plans_data.get("plans_images", [])
    
    print(f"üìê –ó–Ω–∞–π–¥–µ–Ω–æ {len(all_plans_images)} –∑–æ–±—Ä–∞–∂–µ–Ω—å –ø–ª–∞–Ω—ñ–≤")
    
    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø–ª–∞–Ω–∏
    unique_plans_images = filter_unique_plans(all_plans_images)
    
    print(f"üîç –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: {len(unique_plans_images)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ø–ª–∞–Ω—ñ–≤")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π full_info.json –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
    full_info_path = "projects/MEDBLUE_MARBELLA/full_info.json"
    
    if os.path.exists(full_info_path):
        try:
            with open(full_info_path, 'r', encoding='utf-8') as f:
                full_info = json.load(f)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è full_info.json: {str(e)}")
            return
    else:
        full_info = {
            "project_name": initial_data.get("project_name", "MEDBLUE MARBELLA"),
            "url": initial_data.get("url", ""),
            "processed_at": datetime.now().isoformat()
        }
    
    # –î–æ–¥–∞—î–º–æ —Å–µ–∫—Ü—ñ—é –¥–ª—è plans –∞–Ω–∞–ª—ñ–∑—É
    full_info["plans_analysis"] = {
        "total_plans_original": len(all_plans_images),
        "total_plans_unique": len(unique_plans_images),
        "plans_processed": 0,
        "plans_failed": 0,
        "plans_by_type": {},
        "structured_data": [],
        "summary": {}
    }
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω
    for i, plan in enumerate(unique_plans_images):
        try:
            image_url = plan.get("src", "")
            plan_index = plan.get("index", i)
            
            if not image_url:
                print(f"‚ùå –ü–ª–∞–Ω {i+1}: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π URL")
                full_info["plans_analysis"]["plans_failed"] += 1
                continue
            
            print(f"üîç –û–±—Ä–æ–±–∫–∞ –ø–ª–∞–Ω—É {i+1}/{len(unique_plans_images)} (—ñ–Ω–¥–µ–∫—Å: {plan_index})")
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–ª–∞–Ω —á–µ—Ä–µ–∑ AI
            structured_data = ai_processor.analyze_plans(image_url, plan_index)
            
            if structured_data:
                # –î–æ–¥–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ –∑ initial.json
                structured_data["plan_metadata"].update({
                    "alt": plan.get("alt", ""),
                    "title": plan.get("title", ""),
                    "location": plan.get("location", ""),
                    "filename": plan.get("filename", ""),
                    "is_unique": True
                })
                
                full_info["plans_analysis"]["structured_data"].append(structured_data)
                full_info["plans_analysis"]["plans_processed"] += 1
                
                # –ì—Ä—É–ø—É—î–º–æ –ø–ª–∞–Ω–∏ –∑–∞ —Ç–∏–ø–æ–º
                plan_type = structured_data.get("plan_type", "other")
                if plan_type not in full_info["plans_analysis"]["plans_by_type"]:
                    full_info["plans_analysis"]["plans_by_type"][plan_type] = []
                full_info["plans_analysis"]["plans_by_type"][plan_type].append(plan_index)
                
                print(f"‚úÖ –ü–ª–∞–Ω {i+1} —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ (—Ç–∏–ø: {plan_type})")
            else:
                print(f"‚ùå –ü–ª–∞–Ω {i+1} –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏")
                full_info["plans_analysis"]["plans_failed"] += 1
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞–Ω—É {i+1}: {str(e)}")
            full_info["plans_analysis"]["plans_failed"] += 1
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
    print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –ø–ª–∞–Ω—ñ–≤...")
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤—Å—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —Ä–∞–∑–æ–º
    all_structured_data = full_info["plans_analysis"]["structured_data"]
    
    if all_structured_data:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —á–µ—Ä–µ–∑ AI
        try:
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            analysis_data = {
                "total_plans": len(all_structured_data),
                "plans_by_type": full_info["plans_analysis"]["plans_by_type"],
                "sample_plans": all_structured_data[:5]  # –ü–µ—Ä—à—ñ 5 –ø–ª–∞–Ω—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            }
            
            # URL –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            url = f"{ai_processor.base_url}/{ai_processor.model}:generateContent?key={API_KEY}"
            
            # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
            prompt = f"""
            Analyze all architectural plans and create a comprehensive summary:
            
            {json.dumps(analysis_data, indent=2)}
            
            Please create a summary in JSON format:
            
            {{
                "project_overview": {{
                    "total_plans": "number",
                    "plan_types_distribution": {{
                        "community_master_plan": "number",
                        "apartment_unit_plan": "number",
                        "apartment_floor_plan": "number",
                        "other": "number"
                    }},
                    "total_apartments": "number (sum of all units in apartment plans)",
                    "total_amenities": "number (unique amenities across all plans)"
                }},
                "community_analysis": {{
                    "master_plans": "number",
                    "building_blocks": "number (if visible in master plans)",
                    "community_amenities": ["string (from master plans)"],
                    "landscaping_features": ["string"],
                    "access_points": ["string"]
                }},
                "apartment_analysis": {{
                    "unit_types": ["string (e.g., '2-bedroom', '3-bedroom')"],
                    "area_ranges": ["string (e.g., '100-150m2', '150-200m2')"],
                    "common_features": ["string (e.g., 'balcony', 'terrace')"],
                    "room_distribution": {{
                        "bedrooms": ["string"],
                        "bathrooms": ["string"],
                        "living_areas": ["string"]
                    }}
                }},
                "technical_analysis": {{
                    "plan_quality": "string (overall quality assessment)",
                    "detail_level": "string (overall detail level)",
                    "completeness": "string (overall completeness)",
                    "measurement_consistency": "string (are measurements consistent across plans)"
                }},
                "marketing_analysis": {{
                    "key_selling_points": ["string"],
                    "target_audience": "string",
                    "unique_features": ["string"],
                    "plan_purpose": "string (primary purpose of the plans)"
                }}
            }}
            
            Return only the JSON structure, no additional text.
            """
            
            payload = {
                "contents": [
                    {
                        "parts": [
                            {
                                "text": prompt
                            }
                        ]
                    }
                ]
            }
            
            headers = {
                "Content-Type": "application/json"
            }
            
            response = requests.post(url, json=payload, headers=headers)
            
            if response.status_code == 200:
                result = response.json()
                if "candidates" in result and len(result["candidates"]) > 0:
                    content = result["candidates"][0]["content"]["parts"][0]["text"]
                    
                    try:
                        # –û—á–∏—â—É—î–º–æ JSON
                        clean_content = ai_processor.clean_json_content(content)
                        summary_data = json.loads(clean_content)
                        full_info["plans_analysis"]["summary"] = summary_data
                        print("‚úÖ –ó–∞–≥–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø–ª–∞–Ω—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                    except json.JSONDecodeError as e:
                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: {e}")
                        print(f"   –ö–æ–Ω—Ç–µ–Ω—Ç: {content[:200]}...")
                else:
                    print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑: {result}")
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ API –∑–∞–ø–∏—Ç—É –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: {str(e)}")
    
    # –û–Ω–æ–≤–ª—é—î–º–æ timestamp
    full_info["processed_at"] = datetime.now().isoformat()
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ full_info.json
    try:
        with open(full_info_path, 'w', encoding='utf-8') as f:
            json.dump(full_info, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ full_info.json –æ–Ω–æ–≤–ª–µ–Ω–æ: {full_info_path}")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω—ñ–≤:")
        print(f"   - –í—Å—å–æ–≥–æ –ø–ª–∞–Ω—ñ–≤ (–æ—Ä–∏–≥—ñ–Ω–∞–ª): {full_info['plans_analysis']['total_plans_original']}")
        print(f"   - –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ø–ª–∞–Ω—ñ–≤: {full_info['plans_analysis']['total_plans_unique']}")
        print(f"   - –û–±—Ä–æ–±–ª–µ–Ω–æ: {full_info['plans_analysis']['plans_processed']}")
        print(f"   - –ü–æ–º–∏–ª–æ–∫: {full_info['plans_analysis']['plans_failed']}")
        print(f"   - –¢–∏–ø–∏ –ø–ª–∞–Ω—ñ–≤: {list(full_info['plans_analysis']['plans_by_type'].keys())}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è full_info.json: {str(e)}")

if __name__ == "__main__":
    process_plans()
