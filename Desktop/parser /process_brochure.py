#!/usr/bin/env python3
"""
–û–±—Ä–æ–±–∫–∞ Brochure —á–µ—Ä–µ–∑ AI —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è full_info.json
"""

import json
import os
import requests
from ai_processor_download import AIProcessor
from datetime import datetime

def process_brochure():
    """–û–±—Ä–æ–±–∫–∞ Brochure —á–µ—Ä–µ–∑ AI"""
    
    # API –∫–ª—é—á Google AI Studio
    API_KEY = "AIzaSyC0oK7s9qOjZW-Jv9YGCmQlwBkr8K-xMzY"
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ AI –ø—Ä–æ—Ü–µ—Å–æ—Ä
    ai_processor = AIProcessor(API_KEY)
    
    # –®–ª—è—Ö –¥–æ initial.json
    initial_json_path = "projects/MEDBLUE_MARBELLA/initial.json"
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ initial.json
    try:
        with open(initial_json_path, 'r', encoding='utf-8') as f:
            initial_data = json.load(f)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è initial.json: {str(e)}")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ Brochure –¥–∞–Ω—ñ
    brochure_data = initial_data.get("brochure", {})
    brochure_documents = brochure_data.get("brochure_documents", [])
    
    print(f"üìÑ –ó–Ω–∞–π–¥–µ–Ω–æ {len(brochure_documents)} Brochure –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π full_info.json –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
    full_info_path = "projects/MEDBLUE_MARBELLA/full_info.json"
    
    if os.path.exists(full_info_path):
        try:
            with open(full_info_path, 'r', encoding='utf-8') as f:
                full_info = json.load(f)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è full_info.json: {str(e)}")
            return
    else:
        full_info = {
            "project_name": initial_data.get("project_name", "MEDBLUE MARBELLA"),
            "url": initial_data.get("url", ""),
            "processed_at": datetime.now().isoformat()
        }
    
    # –î–æ–¥–∞—î–º–æ —Å–µ–∫—Ü—ñ—é –¥–ª—è brochure –∞–Ω–∞–ª—ñ–∑—É
    full_info["brochure_analysis"] = {
        "documents_processed": 0,
        "documents_failed": 0,
        "structured_data": [],
        "summary": {}
    }
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω PDF –¥–æ–∫—É–º–µ–Ω—Ç
    for i, doc in enumerate(brochure_documents):
        try:
            pdf_url = doc.get("src", "")
            doc_text = doc.get("text", "")
            
            if not pdf_url:
                print(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç {i+1}: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π URL")
                full_info["brochure_analysis"]["documents_failed"] += 1
                continue
            
            print(f"üîç –û–±—Ä–æ–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {i+1}: {doc_text}")
            print(f"   URL: {pdf_url}")
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ AI
            structured_data = ai_processor.analyze_brochure(pdf_url)
            
            if structured_data:
                # –î–æ–¥–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                structured_data["document_metadata"] = {
                    "index": doc.get("index", i),
                    "text": doc_text,
                    "url": pdf_url,
                    "file_type": doc.get("file_type", "PDF"),
                    "location": doc.get("location", ""),
                    "type": doc.get("type", "embed")
                }
                
                full_info["brochure_analysis"]["structured_data"].append(structured_data)
                full_info["brochure_analysis"]["documents_processed"] += 1
                
                print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç {i+1} —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ")
            else:
                print(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç {i+1} –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏")
                full_info["brochure_analysis"]["documents_failed"] += 1
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {i+1}: {str(e)}")
            full_info["brochure_analysis"]["documents_failed"] += 1
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
    print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É brochure...")
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤—Å—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —Ä–∞–∑–æ–º
    all_structured_data = full_info["brochure_analysis"]["structured_data"]
    
    if all_structured_data:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —á–µ—Ä–µ–∑ AI
        try:
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            analysis_data = {
                "total_documents": len(all_structured_data),
                "documents": all_structured_data
            }
            
            # URL –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            url = f"{ai_processor.base_url}/{ai_processor.model}:generateContent?key={API_KEY}"
            
            # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
            prompt = f"""
            Analyze all Brochure documents and create a comprehensive summary:
            
            {json.dumps(analysis_data, indent=2)}
            
            Please create a summary in JSON format:
            
            {{
                "project_overview": {{
                    "name": "string",
                    "location": "string",
                    "developer": "string",
                    "status": "string",
                    "description": "string"
                }},
                "apartment_types_summary": {{
                    "total_types": "number",
                    "bedroom_options": ["string"],
                    "area_ranges": ["string"],
                    "price_ranges": ["string"]
                }},
                "amenities_summary": {{
                    "wellness_features": ["string"],
                    "sports_facilities": ["string"],
                    "leisure_areas": ["string"],
                    "services": ["string"]
                }},
                "location_highlights": {{
                    "area": "string",
                    "distance_to_beach": "string",
                    "distance_to_center": "string",
                    "nearby_attractions": ["string"]
                }},
                "technical_highlights": {{
                    "construction_materials": ["string"],
                    "energy_efficiency": "string",
                    "smart_home_features": ["string"]
                }},
                "marketing_summary": {{
                    "key_selling_points": ["string"],
                    "target_audience": "string",
                    "unique_features": ["string"],
                    "luxury_level": "string"
                }}
            }}
            
            Return only the JSON structure, no additional text.
            """
            
            payload = {
                "contents": [
                    {
                        "parts": [
                            {
                                "text": prompt
                            }
                        ]
                    }
                ]
            }
            
            headers = {
                "Content-Type": "application/json"
            }
            
            response = requests.post(url, json=payload, headers=headers)
            
            if response.status_code == 200:
                result = response.json()
                if "candidates" in result and len(result["candidates"]) > 0:
                    content = result["candidates"][0]["content"]["parts"][0]["text"]
                    
                    try:
                        # –û—á–∏—â—É—î–º–æ JSON
                        clean_content = ai_processor.clean_json_content(content)
                        summary_data = json.loads(clean_content)
                        full_info["brochure_analysis"]["summary"] = summary_data
                        print("‚úÖ –ó–∞–≥–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ brochure —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                    except json.JSONDecodeError as e:
                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: {e}")
                        print(f"   –ö–æ–Ω—Ç–µ–Ω—Ç: {content[:200]}...")
                else:
                    print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑: {result}")
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ API –∑–∞–ø–∏—Ç—É –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: {str(e)}")
    
    # –û–Ω–æ–≤–ª—é—î–º–æ timestamp
    full_info["processed_at"] = datetime.now().isoformat()
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ full_info.json
    try:
        with open(full_info_path, 'w', encoding='utf-8') as f:
            json.dump(full_info, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ full_info.json –æ–Ω–æ–≤–ª–µ–Ω–æ: {full_info_path}")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ brochure:")
        print(f"   - –û–±—Ä–æ–±–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: {full_info['brochure_analysis']['documents_processed']}")
        print(f"   - –ü–æ–º–∏–ª–æ–∫: {full_info['brochure_analysis']['documents_failed']}")
        print(f"   - –°—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö: {len(full_info['brochure_analysis']['structured_data'])}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è full_info.json: {str(e)}")

if __name__ == "__main__":
    process_brochure()
